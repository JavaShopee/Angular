Angular is based on Component based approach to develop web application. The very first thing that you need to think while creating web application is : 

What are the components that you need to build ?

Like Header component, Body component , Side Bar Component , Footer Componentâ€¨
Component : Self sufficient entity that knows how to render itself

You will not be thinking about HTML and JS , but about components.

Components can have sub components.
Commands :

>>node -v

Package manager for node :

>>npm -v 

>>npm install @angular/cli -g

Ng is the command to run Angular CLI

>>ng new first-project

node_modules : contains downloaded dependencies
package.json : list all third party dependencies that we need


>> ng serve (to run the project) will create local development server

>>ng generate component component-name

Annotation is TS way of adding meta data to classes

Create a Date Component and get Current Date and Time reflected on it. It should be updated every second.

{{ }} >> Known as String Interpolation, Expression Interpolation. It looks at the content , not as static text
but some thing that needs to be evaluated. 

Angular enters into evaluation mode.{{ 1+1 }}. Not just referring to Member variable, it's doing evaluation.
{{ somevariable + 1 }} >> Mixup
{{ someFunction(1,2) }}
{{ someFunction(someNumber,2) }}

func1(a:number,b:number)
{
   return a + b;
}
{{ func1(3,4) }}


Passing Inputs : Project Name => Angular_Passing_Inputs
addr.component.ts
@Input('title') userTitle : string

app.component.html
<app-addr title='The Foo Bar Company'></app-addr> >> Initilize the object of AddrComponent class
@Input('title') userTitle : string


We can't initilize in constructor when we are passing the inputs like this :
<app-addr title='The Foo Bar Company'></app-addr>
Angualr wouldn't get the chance to initilize the value at the same time when creting the object. 
For this purpose we use life cycle hook methods.

Life Cycle Hook :

ngOnChanges(){}
When Angular set/reset data bound input properties. Called before ngOnInIt()

When the component is fully initialized, When Angular displays data bound input properties.
ngOnInit(){}


ngOnDestroy(): CleanUp Code before component is destroyerd

ngAfterContenntChecked()
ngAfterViewChecked()
ngAfterViewInIt()

OnInIt interface >> has to override ngOnInIt() method


Example :

export class AddrComponent implements OnInit {

  @Input('user') user : User
  @Input('title') userTitle : string
  constructor() { 

  }

  ngOnInit() {
    
  }
}     

model :

export class User {
    title : string;
    designation : string;
    address : string;
    phone : string[];
}


app.component.ts

import { Component } from '@angular/core';
import { User } from './addr/addr.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'third-project';


  user : User
  constructor(){
      
    this.user  = new User();
    this.user.title =  "The Foo Company";
    this.user.address = "221 NJ"
    this.user.phone = ['233-23-3','2332-23-22']
    }
}

addr.component.html

<div>
     <h1>{{user.title}}!!</h1>
     <h3>{{user.designation}}</h3>
     <h4>{{user.address}}</h4>
  <div *ngIf="user.phone.length > 0">
     Phone
     <p *ngFor="let phone of user.phone">{{phone}}</p>
  </div>
</div>

<app-addr [user]='user'></app-addr>. >> user is the member variable, used with @Input()


Two Way Data Binding in Angular :
<input type="text" [(ngModule)]="sampelStr"/>{{sampelStr}}

() > Data flow from view to component
[] > Data flow from component to view

ngModule is the directive that enables two way data binding in angular

Also make sure to import FormsModule form @angular/forms

import { FormsModule } from '@angular/forms';
@NgModule({
  declarations: [
    AppComponent,
    AddrComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})



TypeScript Import Vs Angular Import :


TS Import :
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';


Angular Import :

imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule
  ]



*******************************************************************************************

generate a new module : ng generate module view
generate a new component inside the module : ng generate component view/viewc

1. view module has to export viewc
2. app module has to import view module 

in order to use view module inside app module

***********************************************************************************************

Annotations in Angular
@NgModule  >> Class is a module
@Injectable >> Class is a service
@Component >> Class is a component

***********************************************************************************************

@NgModule Annotation structure :
decleartation >> for Components
providers >> for Service
imports >> for other modules

***********************************************************************************************
****Services gonna have methodes,we can make use of service methods inside app.component.ts****    
***********************************************************************************************

How to use service methods ?
1. Use Injectable
2. Create constructor args with private member variables. 

export class AppComponent 
{
  constructor(private svc:TestService)
  {
    svc.prinToConsole()
  }
}


********************************************************************************************************
Services are not restricted to module they are declared in. Angular creates the common shared 
space for shared service.

In contrast to components, owning module need to  export the component and other module need to import the same compnent.

Shared Service Space is referred to as Dependency Injection Context.This is the list of services that are available to all the 
components in your module.

Why does it matter which module the service is declared in?

Angular supports the concept of lazily loading which effects how this service injection context works.
There is another way of importing module which is lazily loading them in that scnerio you end up with multilpe such injection 
context. In that case we have to be careful which module the service is declared in.


Making REST calls with HttpClient

Module in app.component.module : HttpClientModule
Service Method Name :  HttpClient

app.component.ts 

export class AppComponent {
  constructor(private http: HttpClient)
  {}
  ngOnInit()
  {
      let obs = this.http.get("https://api.github.com/users/javashopee");
      obs.subscribe((response) => console.log(response))
  }
}


***Rest Response 2 way data binding*****


export class TestComponent implements OnInit {

  userName : string
  response : any
  constructor(private http : HttpClient) 
  { 
     
  }
  
  ngOnInit() 
  {

  }
  search()
  {
    let obs = this.http.get("https://api.github.com/users/" + this.userName);
    obs.subscribe((response) => 
    this.response = response)
  }
}



<input type="text" [(ngModel)]="userName" />
<button (click)="search()">Click</button>
<div *ngIf="response">

{{response.login}}
{{response.login}}
{{response.login}}
{{response.login}}
{{response.login}}

</div>

Each time we run ng serve , there are number of JS files loaded:
vendor.js, runtime.js, styles.js,runtime.js

 ng build >> generate dist/proj-name that can be dployed on CDN
 npm insatll http-server -g >> host a dir on your maching as if it's hosed on CDN and acess it locally
 http-server dist/build-proj
 
 This will eliminate the use of "ng" but again the process will generate all above files again :
 vendor.js, runtime.js, styles.js,runtime.js
 
 ng build --prod >> prd build, Ahead of time compilation (optimization of Angular Code)
 Angular templating is precompiled
 Content smaller, Performance Improved
 
 This will generate hash value in front of file name.
 
 
import { Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { SettingsComponent } from './settings/settings.component';
import { PageNotFoundComponent } from './page-not-found/page-not-found.component';
import { SettingsProfilesComponent } from './settings-profiles/settings-profiles.component';
import { SettingsContactsComponent } from './settings-contacts/settings-contacts.component';

export const routes: Routes = [
  { path: '', redirectTo:'/home', pathMatch:'full' },
  { path: 'home', component: HomeComponent },
  { 
    path: 'settings', 
    component: SettingsComponent,
    children:[
      { path: '', redirectTo:'profiles', pathMatch:'full'  },
      { path: 'profiles', component: SettingsProfilesComponent },
      { path: 'contacts', component: SettingsContactsComponent },
      { path: '**', component: PageNotFoundComponent}
    ]
    
  },
  { path: '**', component: PageNotFoundComponent}
 ];



Single Page App
1st Way :
app.component.html >>
<a routerLink="home">Home</a>
<a routerLink="settings">Settings</a>


2nd Way :
app.component.ts

export class AppComponent {
  title = 'routing-intro';
  homeRoute = 'home'
  settingRoute = 'settings' 
}

app.component.html:
routerLink directive
<a [routerLink]="homeRoute">Home</a>
<a [routerLink]="settingRoute">Settings</a>
<router-outlet></router-outlet>

3rd Way

export class AppComponent {
  title = 'routing-intro';
  
  routes = [
    {linkName : 'Home' , url: 'home'},
    {linkName : 'Settings' , url: 'settings'}
  ]
}



<router-outlet></router-outlet>
